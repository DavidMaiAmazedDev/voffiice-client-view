{"version":3,"sources":["webpack:///src/app/account/login/auth-routing.ts","webpack:///src/app/account/login/auth.module.ts","webpack:///src/app/account/login/login.component.ts","webpack:///src/app/account/login/login.component.html","webpack:///src/app/account/account.module.ts","webpack:///src/app/account/account-routing.module.ts"],"names":["routes","path","component","AuthRoutingModule","forChild","imports","exports","AuthModule","declarations","LoginComponent","formBuilder","route","router","authenticationService","authFackservice","submitted","error","year","Date","getFullYear","loginForm","group","email","required","password","returnUrl","snapshot","queryParams","controls","invalid","login","f","value","pipe","subscribe","data","navigate","onSubmit","selector","templateUrl","styleUrls","AccountModule","loadChildren","then","m","AccountRoutingModule"],"mappings":"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","file":"account-account-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginComponent } from './login.component';\n\nconst routes: Routes = [\n    {\n        path: 'login',\n        component: LoginComponent\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { NgbAlertModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { UIModule } from '../../shared/ui/ui.module';\nimport { LoginComponent } from './login.component';\nimport { AuthRoutingModule } from './auth-routing';\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgbAlertModule,\n    UIModule,\n    AuthRoutingModule\n  ]\n})\nexport class AuthModule { }\n","import { Component, OnInit, AfterViewInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { AuthenticationService } from '../../core/services/auth.service';\nimport { AuthfakeauthenticationService } from '../../core/services/authfake.service';\n\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { environment } from '../../../environments/environment';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\n\n/**\n * Login component\n */\nexport class LoginComponent implements OnInit, AfterViewInit {\n\n  loginForm: FormGroup;\n  submitted = false;\n  error = '';\n  returnUrl: string;\n\n  // set the currenr year\n  year: number = new Date().getFullYear();\n\n  // tslint:disable-next-line: max-line-length\n  constructor(private formBuilder: FormBuilder, private route: ActivatedRoute, private router: Router, private authenticationService: AuthenticationService,\n              private authFackservice: AuthfakeauthenticationService) { }\n\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['admin@themesbrand.com', [Validators.required, Validators.email]],\n      password: ['123456', [Validators.required]],\n    });\n\n    // reset login status\n    // this.authenticationService.logout();\n    // get return url from route parameters or default to '/'\n    // tslint:disable-next-line: no-string-literal\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n\n  ngAfterViewInit() {\n  }\n\n  // convenience getter for easy access to form fields\n  get f() { return this.loginForm.controls; }\n\n  /**\n   * Form submit\n   */\n  onSubmit() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.loginForm.invalid) {\n      return;\n    } else {\n          this.authFackservice.login(this.f.email.value, this.f.password.value)\n            .pipe(first())\n            .subscribe(\n              data => {\n                this.router.navigate(['/filemanager']);\n              },\n              error => {\n                this.router.navigate(['/filemanager']);\n                this.error = error ? error : '';\n              });\n        }\n    // else {\n    //   if (environment.defaultauth === 'firebase') {\n    //     this.authenticationService.login(this.f.email.value, this.f.password.value).then((res: any) => {\n    //       this.router.navigate(['/dashboard']);\n    //     })\n    //       .catch(error => {\n    //         this.router.navigate(['/dashboard']);\n    //         this.error = error ? error : '';\n    //       });\n    //   } else {\n    //     this.authFackservice.login(this.f.email.value, this.f.password.value)\n    //       .pipe(first())\n    //       .subscribe(\n    //         data => {\n    //           this.router.navigate(['/dashboard']);\n    //         },\n    //         error => {\n    //           this.router.navigate(['/dashboard']);\n    //           this.error = error ? error : '';\n    //         });\n    //   }\n    // }\n  }\n}\n","<div class=\"home-btn d-none d-sm-block\">\n  <a href=\"/\" class=\"text-dark\"><i class=\"mdi mdi-home-variant h2\"></i></a>\n</div>\n<div class=\"account-pages my-5 pt-sm-5\">\n  <div class=\"container\">\n    <div class=\"row justify-content-center\">\n      <div class=\"col-md-8 col-lg-6 col-xl-5\">\n        <div class=\"card overflow-hidden\">\n<!--          <div class=\"bg-soft-primary\">-->\n<!--            <div class=\"row\">-->\n<!--              <div class=\"col-7\">-->\n<!--                <div class=\"text-primary p-4\">-->\n<!--                  <h5 class=\"text-primary\">Welcome Back !</h5>-->\n<!--                  <p>Sign in to continue to Skote.</p>-->\n<!--                </div>-->\n<!--              </div>-->\n<!--              <div class=\"col-5 align-self-end\">-->\n<!--                <img src=\"assets/images/profile-img.png\" alt=\"\" class=\"img-fluid\">-->\n<!--              </div>-->\n<!--            </div>-->\n<!--          </div>-->\n          <div class=\"card-body pt-0\">\n<!--            <div>-->\n<!--              <a href=\"/\">-->\n<!--                <div class=\"avatar-md profile-user-wid mb-4\">-->\n<!--                  <span class=\"avatar-title rounded-circle bg-light\">-->\n<!--                    <img src=\"assets/images/logo.svg\" alt=\"\" class=\"rounded-circle\" height=\"34\">-->\n<!--                  </span>-->\n<!--                </div>-->\n<!--              </a>-->\n<!--            </div>-->\n            <div class=\"p-2\">\n              <form class=\"form-horizontal\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n\n                <ngb-alert type=\"danger\" *ngIf=\"error\" [dismissible]=\"false\">{{ error }}</ngb-alert>\n\n                <div class=\"form-group mb-3\">\n                  <label for=\"email\">Email</label>\n\n                  <input type=\"email\" formControlName=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email\"\n                    [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\n                  <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                    <div *ngIf=\"f.email.errors.email\">Email must be a valid email address</div>\n                  </div>\n                </div>\n\n                <div class=\"form-group mb-3\">\n                  <label for=\"password\">Password</label>\n\n                  <input type=\"password\" formControlName=\"password\" class=\"form-control\" id=\"password\"\n                    [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" placeholder=\"Password\" />\n                  <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                  </div>\n                </div>\n\n                <div class=\"custom-control custom-checkbox\">\n                  <input type=\"checkbox\" class=\"custom-control-input\" id=\"customControlInline\">\n                  <label class=\"custom-control-label\" for=\"customControlInline\">Remember me</label>\n                </div>\n\n                <div class=\"mt-3\">\n                  <button class=\"btn btn-primary btn-block\" type=\"submit\">Log In</button>\n                </div>\n              </form>\n            </div>\n\n          </div>\n        </div>\n    </div>\n  </div>\n\n  <!-- end container -->\n</div>\n<!-- end page -->\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AccountRoutingModule } from './account-routing.module';\nimport { AuthModule } from './login/auth.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    AccountRoutingModule,\n    AuthModule\n  ]\n})\nexport class AccountModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: 'auth', loadChildren: () => import('./login/auth.module').then(m => m.AuthModule) },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AccountRoutingModule { }\n"]}